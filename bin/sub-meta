#!/usr/bin/env ruby

require "xmlrpc/client"
require "stringio"

module XMLRPC
  class Client
    begin
      stderr, $stderr = $stderr, StringIO.new
      USER_AGENT = "Subdownloader 1.2.4"
    ensure
      $stderr = stderr
    end

    def do_rpc(request, async=false)
      header = {
        "User-Agent"     =>  USER_AGENT,
        "Content-Type"   => "text/xml; charset=utf-8",
        "Content-Length" => request.bytesize.to_s,
        "Connection"     => (async ? "close" : "keep-alive")
      }

      header["Cookie"] = @cookie        if @cookie
      header.update(@http_header_extra) if @http_header_extra

      if @auth != nil
        # add authorization header
        header["Authorization"] = @auth
      end

      resp = nil
      @http_last_response = nil

      # reuse the HTTP object for each call => connection alive is possible
      # we must start connection explicitly first time so that http.request
      # does not assume that we don't want keepalive
      @http.start if not @http.started?

      # post request
      resp = @http.request_post(@path, request, header)

      @http_last_response = resp

      data = resp.body

      if resp.code == "401"
        # Authorization Required
        raise "Authorization failed.\nHTTP-Error: #{resp.code} #{resp.message}"
      elsif resp.code[0,1] != "2"
        raise "HTTP-Error: #{resp.code} #{resp.message}"
      end

      parse_set_cookies(resp.get_fields("Set-Cookie"))

      return data
    end
  end

  class Create
    def conv2value(param) # :doc:

        val = case param
        when Fixnum, Bignum
          # XML-RPC's int is 32bit int, and Fixnum also may be beyond 32bit
          @writer.tag("i4", param.to_s)
        when TrueClass, FalseClass
          @writer.tag("boolean", param ? "1" : "0")

        when Symbol
          @writer.tag("string", param.to_s)

        when String
          @writer.tag("string", param)

        when NilClass
          raise "Wrong type NilClass. Not allowed!"

        when Float
          raise "Wrong value #{param}. Not allowed!" unless param.finite?
          @writer.tag("double", param.to_s)

        when Struct
          h = param.members.collect do |key|
            value = param[key]
            @writer.ele("member",
              @writer.tag("name", key.to_s),
              conv2value(value)
            )
          end

          @writer.ele("struct", *h)

        when Hash
          # TODO: can a Hash be empty?

          h = param.collect do |key, value|
            @writer.ele("member",
              @writer.tag("name", key.to_s),
              conv2value(value)
            )
          end

          @writer.ele("struct", *h)

        when Array
          # TODO: can an Array be empty?
          a = param.collect {|v| conv2value(v) }

          @writer.ele("array",
            @writer.ele("data", *a)
          )

        when Time, Date, ::DateTime
          @writer.tag("dateTime.iso8601", param.strftime("%Y%m%dT%H:%M:%S"))

        when XMLRPC::DateTime
          @writer.tag("dateTime.iso8601",
            format("%.4d%02d%02dT%02d:%02d:%02d", *param.to_a))

        when XMLRPC::Base64
          @writer.tag("base64", param.encoded)

        else
          ok, pa = wrong_type(param)
          if ok
            return conv2value(pa)
          else
            raise "Wrong type!"
          end
        end

        @writer.ele("value", val)
    end
  end
end

module MovieHasher
  CHUNK_SIZE = 64 * 1024 # in bytes

  def self.compute_hash(path)
    File.open(path, "rb") do |io|
      size = io.size
      hash = size

      io.read(CHUNK_SIZE).to_s.unpack("Q*").each do |n|
        hash = hash + n & 0xffffffffffffffff
      end

      io.seek([0, size - CHUNK_SIZE].max, IO::SEEK_SET)

      # And again for the end of the file
      io.read(CHUNK_SIZE).to_s.unpack("Q*").each do |n|
        hash = hash + n & 0xffffffffffffffff
      end

      sprintf("%016x", hash)
    end
  end
end

require "optparse"

begin
  options = { lang: "eng" }

  OptionParser.new do |opts|
    opts.banner = "Usage: #{File.basename($0)} [options] <video> <video> ..."
    opts.on("-l", "--lang LANGUAGE", "Choose language (Defaults to 'eng')") do |val|
      options[:lang] = val
    end
  end.parse!

  server = XMLRPC::Client.new("api.opensubtitles.org", "/xml-rpc", 80)
  login = server.call("LogIn", "", "", "en", XMLRPC::Client::USER_AGENT)

  paths = $stdin.read.split("\n")

  queries = paths.map do |path|
    {
      "moviehash" => MovieHasher.compute_hash(path),
      "moviebytesize" => File.size(path),
      "sublanguageid" => options.fetch(:lang),
    }
  end

  results = server.call(
    "SearchSubtitles",
    login.fetch("token"),
    queries
  ).fetch("data")

  exit if results == false

  queries.each.with_index do |query, idx|
    if result = results.find { |r| r["MovieHash"] == query["moviehash"] }
      result["LocalPath"] = File.expand_path(paths.fetch(idx))
      if ARGV.any?
        puts result.values_at(*ARGV).join("\t")
      else
        puts result.map { |pair| pair.join("\t") }
      end
    end
  end
rescue => err
  $stderr.puts err
end
